--7_2 Trapping Oracle Server Exceptions

-- Trapping a non-predefined error
DECLARE
    e_insert_excep EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_insert_excep, -01400);
BEGIN
    INSERT INTO dept(deptno, dname, loc) VALUES(40, NULL, 'Ljubljana'); --will fail as dname is not nullable
    EXCEPTION
    WHEN e_insert_excep
    THEN
    DBMS_OUTPUT.PUT_LINE('Insert failed.');
END;

--Exercise 3
DECLARE 
    v_number NUMBER(6, 2) := 100;
    v_region_id wf_world_regions.region_id%TYPE;
    v_region_name wf_world_regions.region_name%TYPE;

    e_divisor_exception EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_divisor_exception, -01476);

BEGIN
    SELECT region_id, region_name INTO v_region_id, v_region_name
    FROM wf_world_regions
    WHERE region_id = 29;
    DBMS_OUTPUT.PUT_LINE('Region: ' || v_region_id || ' is: ' || v_region_name); v_number := v_number / 0;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Do data found for this ' || v_region_id);
        WHEN e_divisor_exception THEN
        DBMS_OUTPUT.PUT_LINE('Division with 0 is not allowed.');
END;


--Exercise 4

DECLARE
    CURSOR regions_curs IS 
    SELECT * FROM wf_world_regions
    WHERE region_id < 20
    ORDER BY region_id;
    regions_rec regions_curs%ROWTYPE; 
    v_count NUMBER(6);
BEGIN
    OPEN regions_curs;
    LOOP
        FETCH regions_curs INTO regions_rec;
        EXIT WHEN regions_curs%NOTFOUND; 
        DBMS_OUTPUT.PUT_LINE('Region: ' || regions_rec.region_id || ' Name: ' || regions_rec.region_name); 
    END LOOP;
    CLOSE regions_curs;
    SELECT COUNT(*) INTO v_count
    FROM wf_world_regions
    WHERE region_id = 1;
    DBMS_OUTPUT.PUT_LINE('The number of regions is: ' || v_count);
END;


--Exercise 5
DECLARE
    v_language_id wf_languages.language_id%TYPE; 
    v_language_name wf_languages.language_name%TYPE;

   e_null_not_allowed EXCEPTION;
   PRAGMA EXCEPTION_INIT(e_null_not_allowed, -01400);

BEGIN
    SELECT language_id, language_name INTO v_language_id, v_language_name
    FROM wf_languages
    WHERE LOWER(language_name) LIKE 'zulu'; -- for example 'ab%' 
    INSERT INTO wf_languages(language_id, language_name)
    VALUES(3001, null);

    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No data found.');
    WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('There is more than one result. Consider using a cursor.');
    WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('Error! This language id already exists.');
    WHEN e_null_not_allowed THEN
    DBMS_OUTPUT.PUT_LINE('Error! Language name must be provided.');
END;


--Exercise 6
CREATE table error_log(
    who varchar(30),
    when DATE,
    error_code NUMBER(6),
    error_message VARCHAR(255)

);

SELECT * 
FROM error_log;

DECLARE
    v_language_id wf_languages.language_id%TYPE; 
    v_language_name wf_languages.language_name%TYPE;
    l_error_message VARCHAR2(255);
    l_error_code NUMBER;
BEGIN
    SELECT language_id, language_name INTO v_language_id, v_language_name
    FROM wf_languages
    WHERE LOWER(language_name) LIKE 'ab'; -- for example 'ab%' 
    INSERT INTO wf_languages(language_id, language_name)
    VALUES(3000, 'English-Mandarin');

    EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
    l_error_message := SQLERRM;
    l_error_code := SQLCODE;
    INSERT INTO error_log(who, when, error_code, error_message) VALUES('ORACLE_APEX_USER', SYSDATE, l_error_code, l_error_message);
END;